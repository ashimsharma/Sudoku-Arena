// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String       @id @default(uuid())
  email     String       @unique
  name      String
  avatarUrl String?
  games     GamePlayer[]
  wonGames  Game[]   @relation("UserWonGames")

  requestedFriends     Friend[] @relation("RequestedFriends")
  receivedFriends    Friend[] @relation("ReceivedFriends")

  noOfWins   Int  @default(0)
  noOfLosses   Int @default(0)
  noOfDraws   Int @default(0)
}

enum GameStatus {
  ACTIVE
  COMPLETED
  ENDED
}

model Game {
  id      String       @id @default(uuid())
  players GamePlayer[]    @relation("UserGame")

  options Json

  createdAt DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  status    GameStatus
  winner    User?      @relation("UserWonGames", fields: [winnerId], references: [id])
  winnerId  String?    

  draw  Boolean?
}

model GamePlayer {
  id    String @id @default(uuid())
  score Int    @default(0)

  game   Game   @relation("UserGame", fields: [gameId], references: [id])
  gameId String

  gameData Json?

  user   User   @relation(fields: [userId], references: [id])
  userId String

  @@unique([userId, gameId])
}

enum PlayerRoles {
  Player1
  Player2
}

model Friend {
  id           String   @id @default(uuid())
  requester    User     @relation("RequestedFriends", fields: [requesterId], references: [id])
  requesterId  String
  receiver     User     @relation("ReceivedFriends", fields: [receiverId], references: [id])
  receiverId   String
  status       String  
  createdAt    DateTime @default(now())

  @@unique([requesterId, receiverId])
}


enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
